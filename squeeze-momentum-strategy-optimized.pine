//@version=4
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© franferdez


// BEGIN UNCOMMENT FOR BACKTESTING
strategy(title="Squeeze Optimized Strategy", shorttitle="SQZOPT Strategy", overlay=true, pyramiding=0, default_qty_value=100, commission_value=0.1, commission_type=strategy.commission.percent, initial_capital=1000)
strategyEntry(name, direction, myCondition) =>
    if direction == 1 and name == "Long"
        strategy.entry("Long", 1, when=myCondition)
    if direction == 0 and name == "Short"
        strategy.entry("Short", 0, when=myCondition)
strategyClose(name, myCondition) =>
    if name == "Long"
        strategy.close("Long", when=myCondition)
    if name == "Short"
        strategy.close("Short", when=myCondition)
isStrategy = true
isStudy = false
// END UNCOMMENT FOR BACKTESTING

// BEGIN UNCOMMENT FOR ALERTS
// study(title="[Autoview][Alerts] Simple Template 1.0", shorttitle="[AL] Simple Template 1.0", overlay=true)
// strategyEntry(RUNNING, AS, STUDY) =>   RUNNING=='false' ? false : false
// strategyClose(ALERTS, NOT_STRATEGY) => ALERTS== 'false' ? false : false
// isStrategy = false, isStudy = true
// END UNCOMMENT FOR ALERTS

//  Name: Pine Strategy Template 1.02
//  Author:   TensorTom
//  Previous fork by: MrBit (yatrader2)
//  Based on work by: JustUncleL and CryptoRox
//  Revision: R0.02
//  Date:     4/10/2019
//

//////////////////////////////////////////////////////////////////////////////////////////
// INPUTS

useRenko = input(false, title="This a RENKO Chart?")
// WARNING: Using Heikin-Ashi may result in inaccurate backtest results
useHeikin = input(false, title="Use Heikin-Ashi Candles? (BT WILL BE UNRELIABLE)")
// Use Alternate Anchor TF for MAs
anchor = input(0, minval=0, maxval=1440, title="Alternate TimeFrame Multiplier (0=none)")
// If have anchor specified, calculate the base multiplier.
//mult  = isintraday ? anchor==0 or interval<=0 or interval>=anchor or anchor>1440? 1 : round(anchor/interval) : 1
//mult := isdwm?  1 : mult  // Only available Daily or less
mult = anchor > 0 ? anchor : 1
security_1 = security(heikinashi(syminfo.tickerid), timeframe.period, open)
security_2 = security(syminfo.tickerid, timeframe.period, open)
open_ = useHeikin ? security_1 : security_2
security_3 = security(heikinashi(syminfo.tickerid), timeframe.period, close)
security_4 = security(syminfo.tickerid, timeframe.period, close)
close_ = useHeikin ? security_3 : security_4
security_5 = security(heikinashi(syminfo.tickerid), timeframe.period, high)
security_6 = security(syminfo.tickerid, timeframe.period, high)
high_ = useRenko ? max(close_, open_) : useHeikin ? security_5 : security_6
security_7 = security(heikinashi(syminfo.tickerid), timeframe.period, low)
security_8 = security(syminfo.tickerid, timeframe.period, low)
low_ = useRenko ? min(close_, open_) : useHeikin ? security_7 : security_8
uPrice = input(title="Price", defval="close", options=["close", "high", "low"])
src = uPrice == "close" ? close_ :
   uPrice == "high" ? high_ : uPrice == "low" ? low_ : na
// This is superced by the design of specifying Open and Close setting in strategy
// fastExit  = input(false,title="Use Opposite Trade as a Close Signal")
fastExit = false
isLong = input(true, title="Allow Longs")
isShort = input(false, title="Allow Shorts")
flipTrade = input(false, title="Flip/Invert Strategy")
clrBars = input(false, title="Colour Candles to Trade Order state")

// Stop loss ATR inputs
isAtrEnabled = input(true, title="Allow ATR value for stops losses")
atrLen = input(10, title="ATR Length", minval=10, maxval= 200)
atrValue = atr(atrLen)


// CONSTANTS
AQUA = #00FFFFFF
BLUE = #0000FFFF
RED = #FF0000FF
LIME = #00FF00FF
GRAY = #808080FF
DARKRED = #8B0000FF
DARKGREEN = #006400FF
LIGHTGREEN = #a5d6a7
LIGHTRED = #ef9a9a

//////////////////////////////////////////////////////////////////////////////////////////
// BEGIN ACTUAL STRATEGY

// Heikin Ashi ATR Calculations

// study(shorttitle="Squeeze Optimized", title="Squeeze Momentum - Optimized", overlay=false)

length = input(20, title="Squeeze Length")
multBB = input(2, title="BB MultFactor")
multKC = input(1.5, title="KC MultFactor")
smooth = input(20, title="Momentum Smoothing")

usebbr = input(true, title="Use Bollinger Band Ratio Instead of Momentum", type=input.bool)
useHAC = input(true, title="Heikin Ashi Optimization", type=input.bool)

// Heikin Ashi ATR Calculations
haclose = ohlc4
haopen = (open + close) / 2
haopen := na(haopen[1]) ? (open + close) / 2 : (haopen[1] + haclose[1]) / 2
hahigh = max(high, max(haopen, haclose))
halow = min(low, min(haopen, haclose))
haatra = abs(hahigh - haclose[1])
haatrb = abs(haclose[1] - halow)
haatrc = abs(hahigh - halow)
haatr = max(haatra, max(haatrb, haatrc))

source = useHAC ? haclose : close

// Calculate BB
basis = sma(source, length)
dev = multBB * stdev(source, length)
upperBB = basis + dev
lowerBB = basis - dev


// Calculate KC
ma = sma(source, length)
range = useHAC ? haatr : tr
rangema = sma(range, length)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn = lowerBB > lowerKC and upperBB < upperKC
sqzOff = lowerBB < lowerKC and upperBB > upperKC
noSqz = sqzOn == false and sqzOff == false

// Momentum ======> %B Indicator OR Rate of Change (ROC)
momentum = usebbr ? (source - lowerBB) / (upperBB - lowerBB) - 0.5 :
   (close - close[12]) / close[12] * 100
val = sma(momentum, smooth)

// Plot Statements
bcolor = iff(val > 0, iff(val > nz(val[1]), color.green, color.blue), iff(val < nz(val[1]), color.red, color.orange))
scolor = noSqz ? color.blue : sqzOn ? color.red : color.green
plot(val, color=bcolor, style=plot.style_histogram, linewidth=3)
plot(0, color=scolor, style=plot.style_circles, linewidth=3)

isBullMomentumON = val > 0 and (val > nz(val[1])) and nz(val[1]) > 0
isBullMomentumOFF =  val > 0 and not (val > nz(val[1]))
// Plot the SQUEEZE/MOMENTUM
// plot(val, color=bcolor, style=plot.style_histogram, linewidth=4)
// plot(0, color=scolor, style=plot.style_circles, linewidth=2)

//------------------------------------ Stacked UP Ema's ---------------------------------
// study("EMA stacked", overlay=true)

length1 = input(8,  '1 Ema length')
length2 = input(21, '2 Ema length')
length3 = input(34, '3 Ema length')
length4 = input(55, '4 Ema length')
length5 = input(89, '5 Ema length')

ema1 = ema(close, length1)
ema2 = ema(close, length2)
ema3 = ema(close, length3)
ema4 = ema(close, length4)
ema5 = ema(close, length5)

// stack = close > ema5 and close > ema4 and close > ema3 and close > ema2 and close > ema1
isEmaStackUP = ema1 > ema2 and ema2 > ema3 and ema3 > ema4 and ema4 > ema5
plotshape(true, style=shape.xcross, color=isEmaStackUP ? color.green : color.red, show_last=100)
//------------------------------------ MACD ---------------------------------
withMacd = input(false, "Use macd for strategy")

fast = 12, slow = 26
fastMA = ema(close, fast)
slowMA = ema(close, slow)
macd = fastMA - slowMA
signal = sma(macd, 9)

macDelta = macd - signal

// ------------------------------------ STRATEGY ----------------------------------------

// openLong = crossover(sma(src, quick * mult), sma(src, slow * mult))
openLong = close > ema2 and sqzOn and isBullMomentumON and isEmaStackUP and (withMacd? crossover(macDelta, 0) : true)
closeLong = (isBullMomentumOFF and sqzOff) or (withMacd? crossunder(macDelta, 0): false)

openShort = closeLong
closeShort = openLong

// END ACTUAL STRATEGY
//////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////
//* Period selector for backtesting and optionally alerts

// A switch to control background coloring of the test period
testPeriodforAlerts = input(title="Limit Alerts to Test Period", type=input.bool, defval=false)
testPeriodBackground = input(title="Color Test Period?", type=input.bool, defval=false)

// Autoset Backtest Period
autolen = input(title="Auto set backtest Start", defval=true)
custom_candle_start = 0
timecondition_hourly = bar_index >
   round(76.5633 * pow(timeframe.multiplier / 60, 2) - 1745.19 * (timeframe.multiplier / 60) + 10649)
timecondition_daily = bar_index > round(1000 / timeframe.multiplier)  // Only for bitcoin, need a separate quadratic fit for other securities
autolen_timePeriod = autolen ? timeframe.multiplier >= 60 and timeframe.multiplier <= 720 and
   timecondition_hourly or timeframe.multiplier < 60 and timecondition_daily :
   false

// Or set a specifc period
testStartMonth = input(1, "Backtest Start Month", minval=1, maxval=12)
testStartYear = input(2019, "Backtest Start Year", minval=1980)
// testStartDay = input(1, "Backtest Start Day",minval=1,maxval=31)
testStartDay = 1
testPeriodStart = timestamp(testStartYear, testStartMonth, testStartDay, 0, 0)

testStopMonth = input(title="Backtest Stop Month", type=input.integer, defval=12, step=1, minval=1, maxval=12)
testStopYear = input(title="Backtest Stop Year", type=input.integer, defval=2019, step=1, minval=2013, maxval=2020)
//testStopDay = input(title="Backtest Stop Day", type=integer, defval=31, step=1, minval=1, maxval=31)
testStopDay = 31
testPeriodStop = timestamp(testStopYear, testStopMonth, testStopDay, 0, 0)

// See if we are in the the time period (or we are not using it)
testPeriod() =>
    // Are we running as a strategy or as a Study with testPeriod restriction?
    isStrategy or testPeriodforAlerts ? autolen ? autolen_timePeriod :
       time >= testPeriodStart and time <= testPeriodStop ? true : false : true  // Not a strategy or not using testPeriod so it is "always" the period

// Color the period (or don't)
testPeriodBackgroundColor = testPeriodBackground and testPeriod() ? #000055 : na
bgcolor(testPeriodBackgroundColor, transp=90)

//////////////////////////////////////////////////////////////////////////////////////////
// Generate Buy Sell signals,

buy = 0
buy := openLong and testPeriod() ? nz(buy[1]) > 0 ? buy[1] + 1 : 1 : 0
sell = 0
sell := openShort and testPeriod() ? nz(sell[1]) > 0 ? sell[1] + 1 : 1 : 0


//////////////////////////
//* Trade State Engine *//
//////////////////////////

// Keep track of current trade state
longClose = false
longClose := nz(longClose[1], false)
shortClose = false
shortClose := nz(shortClose[1], false)
tradeState = 0
tradeState := nz(tradeState[1])
tradeState := tradeState == 0 ?
   buy == 1 and (barstate.isconfirmed or barstate.ishistory) and isLong and
   not longClose and not shortClose ? 1 :
   sell == 1 and (barstate.isconfirmed or barstate.ishistory) and isShort and
   not longClose and not shortClose ? -1 : tradeState : tradeState

///////////////////////////////////////////////////////
//Handle Entry Conditions, when state changes direction.

longCondition = false
shortCondition = false
longCondition := change(tradeState) and tradeState == 1
shortCondition := change(tradeState) and tradeState == -1
if flipTrade
    temp = longCondition
    longCondition := shortCondition
    shortCondition := temp
    shortCondition
//end if

// Exit on Sell signal
longExitC = closeLong and testPeriod() ? 1 : 0
shortExitC = closeShort and testPeriod() ? 1 : 0

// Exit condition for no SL.
longExit = change(longExitC) and longExitC == 1 and tradeState == 1
shortExit = change(shortExitC) and shortExitC == 1 and tradeState == -1

// -- debugs
//plotchar(tradeState,"tradeState at Event",location=location.bottom, color=na)
//plotchar(longCondition, title="longCondition",color=na)
//plotchar(shortCondition, title="shortCondition",color=na)
//plotchar(tradeState, title="tradeState",color=na)
// -- /debugs

/////////////////////////////////////
//======[ Deal Entry Prices ]======//
/////////////////////////////////////

last_open_longCondition = float(na)
last_open_shortCondition = float(na)
last_open_longCondition := longCondition ? close : nz(last_open_longCondition[1])
last_open_shortCondition := shortCondition ? close : nz(last_open_shortCondition[1])

//////////////////////////////////
//======[ Position State ]======//
//////////////////////////////////

in_longCondition = tradeState == 1
in_shortCondition = tradeState == -1

/////////////////////////////////
//======[ Trailing Stop ]======//
/////////////////////////////////

isTS = input(false, "Trailing Stop")
ts = input(3.0, "Trailing Stop (%)", minval=0, step=0.1, type=input.float) / 100

last_high = float(na)
last_low = float(na)
last_high_short = float(na)
last_low_long = float(na)
last_high := not in_longCondition ? na :
   in_longCondition and (na(last_high[1]) or high_ > nz(last_high[1])) ? high_ :
   nz(last_high[1])
last_high_short := not in_shortCondition ? na :
   in_shortCondition and (na(last_high[1]) or high_ > nz(last_high[1])) ? high_ :
   nz(last_high[1])
last_low := not in_shortCondition ? na :
   in_shortCondition and (na(last_low[1]) or low_ < nz(last_low[1])) ? low_ :
   nz(last_low[1])
last_low_long := not in_longCondition ? na :
   in_longCondition and (na(last_low[1]) or low_ < nz(last_low[1])) ? low_ :
   nz(last_low[1])

long_ts = isTS and in_longCondition and not na(last_high) and
   low_ <= last_high - last_high * ts  //and (last_high >= last_open_longCondition + last_open_longCondition * tsi)
short_ts = isTS and in_shortCondition and not na(last_low) and
   high_ >= last_low + last_low * ts  //and (last_low <= last_open_shortCondition - last_open_shortCondition * tsi)


///////////////////////////////
//======[ Take Profit ]======//
///////////////////////////////

isTP = input(false, "Take Profit")
tp = input(3.0, "Take Profit (%)", minval=0, step=0.1, type=input.float) / 100
ttp = input(1.0, "Trailing Profit (%)", minval=0, step=0.1, type=input.float) / 100
tpMult = input(4.0, title="Take Profit (ATR Steps)", minval=1, maxval=20, type=input.float)

ttp := ttp > tp ? tp : ttp

long_tp = isTP and in_longCondition and
   last_high >= last_open_longCondition + (isAtrEnabled? atrValue * tpMult : last_open_longCondition *  tp) and
   low_ <= last_high - (isAtrEnabled? atrValue * tpMult : last_high * ttp)
short_tp = isTP and in_shortCondition and
   last_low <= last_open_shortCondition -  (isAtrEnabled? atrValue * tpMult : last_open_shortCondition * tp) and
   high_ >= last_low + (isAtrEnabled? atrValue * tpMult : last_low * ttp)

/////////////////////////////
//======[ Stop Loss ]======//
/////////////////////////////

isSL = input(false, "Stop Loss")
sl = input(1.0, "Stop Loss (%)", minval=0, step=0.1, type=input.float) / 100
slMult = input(4.0, title="Stop Loss (ATR Steps)", minval=1, maxval=20, type=input.float)

long_sl = isSL and in_longCondition and
   low_ <= last_open_longCondition -  (isAtrEnabled? atrValue * slMult : last_open_longCondition * sl)
short_sl = isSL and in_shortCondition and
   high_ >= last_open_shortCondition +  (isAtrEnabled? atrValue * slMult : last_open_shortCondition * sl)

////////////////////////////////////
//======[ Stop on Opposite ]======//
////////////////////////////////////
// fastExit is superced by the design of specifying Open and Close setting in strategy
long_sos = (fastExit or not isTS and not isSL) and longExit and in_longCondition
short_sos = (fastExit or not isTS and not isSL) and shortExit and in_shortCondition


/////////////////////////////////
//======[ Close Signals ]======//
/////////////////////////////////

// Create a single close for all the different closing conditions, all conditions here are non-repainting
longClose := isLong and (long_tp or long_sl or long_ts or long_sos) and not longCondition
shortClose := isShort and (short_tp or short_sl or short_ts or short_sos) and
   not shortCondition

///////////////////////////////
//======[ Plot Colors ]======//
///////////////////////////////

longCloseCol = color(na)
shortCloseCol = color(na)
longCloseCol := long_tp ? color.green : long_sl ? color.maroon :
   long_ts ? color.purple : long_sos ? color.orange : longCloseCol[1]
shortCloseCol := short_tp ? color.green : short_sl ? color.maroon :
   short_ts ? color.purple : short_sos ? color.orange : shortCloseCol[1]
//
tpColor = isTP and in_longCondition ? color.lime :
   isTP and in_shortCondition ? color.lime : na
slColor = isSL and in_longCondition ? color.red :
   isSL and in_shortCondition ? color.red : na


//////////////////////////////////
//======[ Strategy Plots ]======//
//////////////////////////////////

plot(isTS and in_longCondition ? last_high - last_high * ts : na, "Long Trailing", LIGHTRED, style=plot.style_linebr, linewidth=2, offset=1)
plot(isTP and in_longCondition and last_high < last_open_longCondition + last_open_longCondition * tp ? last_open_longCondition + last_open_longCondition * tp : na, "Long TP Active", tpColor, style=plot.style_linebr, join=false, linewidth=2, offset=1)
plot(isTP and in_longCondition and last_high >= last_open_longCondition + last_open_longCondition * tp ? last_high - last_high * ttp : na, "Long Trailing", LIGHTGREEN, style=plot.style_linebr, linewidth=2, offset=1)
plot(isSL and in_longCondition and last_low_long > last_open_longCondition - last_open_longCondition * sl ? last_open_longCondition - last_open_longCondition * sl : na, "Long SL", slColor, style=plot.style_linebr, join=false, linewidth=2, offset=1)
//
plot(isTS and in_shortCondition ? last_low + last_low * ts : na, "Short Trailing", LIGHTRED, style=plot.style_linebr, linewidth=2, offset=1)
plot(isTP and in_shortCondition and last_low > last_open_shortCondition - last_open_shortCondition * tp ? last_open_shortCondition - last_open_shortCondition * tp : na, "Short TP Active", tpColor, style=plot.style_linebr, join=false, linewidth=2, offset=1)
plot(isTP and in_shortCondition and last_low <= last_open_shortCondition - last_open_shortCondition * tp ? last_low + last_low * ttp : na, "Short Trailing", LIGHTGREEN, style=plot.style_linebr, linewidth=2, offset=1)
plot(isSL and in_shortCondition and last_high_short < last_open_shortCondition + last_open_shortCondition * sl ? last_open_shortCondition + last_open_shortCondition * sl : na, "Short SL", slColor, style=plot.style_linebr, join=false, linewidth=2, offset=1)
//
bclr = not clrBars ? na : tradeState == 0 ? GRAY :
   in_longCondition ? close < last_open_longCondition ? DARKGREEN : LIME :
   in_shortCondition ? close > last_open_shortCondition ? DARKRED : RED : GRAY
barcolor(bclr, title="Trade State Bar Colouring")


///////////////////////////////
//======[ Alert Plots ]======//
///////////////////////////////

plotshape(longCondition and isStudy ? close : na, title="Long", color=color.green, textcolor=color.green, transp=0, style=shape.triangleup, location=location.belowbar, size=size.small, text="LONG", offset=0)
plotshape(longClose and isStudy ? close : na, title="Long Close", color=longCloseCol, textcolor=color.white, transp=0, style=shape.labeldown, location=location.abovebar, size=size.small, text="Long\nClose", offset=0)

plotshape(shortCondition and isStudy ? close : na, title="Short", color=color.red, textcolor=color.red, transp=0, style=shape.triangledown, location=location.abovebar, size=size.small, text="SHORT", offset=0)
plotshape(shortClose and isStudy ? close : na, title="Short Close", color=shortCloseCol, textcolor=color.white, transp=0, style=shape.labelup, location=location.belowbar, size=size.small, text="Short\nClose", offset=0)

// Autoview alert syntax - This assumes you are trading coins BUY and SELL on Binance Exchange
// WARNING*** Only use Autoview to automate a strategy after you've sufficiently backtested and forward tested the strategy.
// You can learn more about the syntax here:
//      http://autoview.with.pink/#syntax and you can watch this video here: https://www.youtube.com/watch?v=epN5Tjinuxw

// For the opens you will want to trigger BUY orders on LONGS (eg ETHBTC) with alert option "Once Per Bar Close"
// and SELL orders on SHORTS (eg BTCUSDT)
//      b=buy q=0.001 e=binance s=ethbtc t=market  ( LONG )
// or   b=sell q=0.001 e=binance s=btcusdt t=market ( SHORT )
alertcondition(longCondition and isStudy, "Open Long", "LONG")
alertcondition(shortCondition and isStudy, "Open Short", "SHORT")

// For the closes you will want to trigger these alerts on condition with alert option "Once Per Bar"
// (NOTE: with Renko you can only use "Once Per Bar Close" option)
//      b=sell q=99% e=binance s=ethbtc t=market  ( CLOSE LONGS )
// or   b=buy q=99% e=binance s=btcusdt t=market  ( CLOSE SHORTS )
// This gets it as it happens and typically results in a better exit live than in the backtest.
// It works really well for counteracting some market slippage
alertcondition(longClose and isStudy, "Close Longs", "CLOSE LONGS")
alertcondition(shortClose and isStudy, "Close Shorts", "CLOSE SHORTS")

////////////////////////////////////////////
//======[ Strategy Entry and Exits ]======//
////////////////////////////////////////////
if testPeriod() and isLong and isStrategy
    strategyEntry("Long", 1, longCondition)
    strategyClose("Long", longClose)

if testPeriod() and isShort and isStrategy
    strategyEntry("Short", 0, shortCondition)
    strategyClose("Short", shortClose)

// --- Debugs
//plotchar(longExit,title="longExit",location=location.bottom,color=na)
//plotchar(longCondition,title="longCondition",location=location.bottom,color=na)
//plotchar(in_longCondition,title="in_longCondition",location=location.bottom,color=na)
//plotchar(longClose,title="longClose",location=location.bottom,color=na,color=na)
//plotchar(buy,title="buy",location=location.bottom,color=na)
// --- /Debugs

///////////////////////////////////
//======[ Reset Variables ]======//
///////////////////////////////////

if longClose or not in_longCondition
    last_high := na
    last_high_short := na
    last_high_short

if shortClose or not in_shortCondition
    last_low := na
    last_low_long := na
    last_low_long

if longClose or shortClose
    tradeState := 0
    in_longCondition := false
    in_shortCondition := false
    in_shortCondition


plotchar(tradeState, "tradeState at EOF", location=location.bottom, color=na)
// EOF
